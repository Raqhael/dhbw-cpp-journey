#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <random>
#include <chrono>
#include <locale>
#ifdef _WIN32
#include <Windows.h>
#endif
#include <cstdio>

#define FIELD_SIZE_X 16
#define FIELD_SIZE_Y 16
#define BOMBS_COUNT 99
#define BOMBCHAR '#'

#define WITHEMOTE
#if defined(_WIN32) || defined(WITHEMOTE)
#define _CHAR_1 "1Ô∏è‚É£"
#define _CHAR_2 "2Ô∏è‚É£"
#define _CHAR_3 "3Ô∏è‚É£"
#define _CHAR_4 "4Ô∏è‚É£"
#define _CHAR_5 "5Ô∏è‚É£"
#define _CHAR_6 "6Ô∏è‚É£"
#define _CHAR_7 "7Ô∏è‚É£"
#define _CHAR_8 "8Ô∏è‚É£"
#define _CHAR_BOMB "üí£"
#define _CHAR_REVEALED "‚¨õ"
#define _CHAR_HIDDEN "‚¨ú"
#else
#define GREY_BACKGROUND "\033[47m"
#define RED_TEXT "\033[31m"
#define LIGHT_RED_TEXT "\033[91m"
#define GREEN_TEXT "\033[32m"
#define BLUE_TEXT "\033[34m"

#define _CHAR_1 "\033[48;5;240;34m1 \033[0m"
#define _CHAR_2 "\033[48;5;240;32m2Ô∏è \033[0m"
#define _CHAR_3 "\033[48;5;240;91m3Ô∏è \033[0m"
#define _CHAR_4 "\033[48;5;240;91m4Ô∏è \033[0m"
#define _CHAR_5 "\033[48;5;240;91m5Ô∏è \033[0m"
#define _CHAR_6 "\033[48;5;240;91m6Ô∏è \033[0m"
#define _CHAR_7 "\033[48;5;240;91m7Ô∏è \033[0m"
#define _CHAR_8 "\033[48;5;240;91m8Ô∏è \033[0m"
#define _CHAR_BOMB "\033[48:5:240;31;3m@ \033[0m"
#define _CHAR_REVEALED "\033[48:5:240m# \033[0m"
#define _CHAR_HIDDEN "\033[48;5;15m. \033[0m"
#endif










// ANSI - Color - Codes, generated by Copilot

// Color reset console print
#define COLOR_RESET "\033[0m"

char ms_field[FIELD_SIZE_X][FIELD_SIZE_Y];
void initField(char field[FIELD_SIZE_X][FIELD_SIZE_Y]);
void printField(char field[FIELD_SIZE_X][FIELD_SIZE_Y]);
void insertBombs(char field[FIELD_SIZE_X][FIELD_SIZE_Y]);
void insertNumbers(char field[FIELD_SIZE_X][FIELD_SIZE_Y]);
int GetRandomNumberBetween(int lower, int upper);

// C-Version of Random, because it's only peudso random on windows
int GetRandomNumberBetween(int lower, int upper)
{
    return lower + (rand() % (upper - lower + 1));
}

int main()
{
    setlocale(LC_ALL, "en_US.utf8"); // Sometimes it's needed to set locale to get correct symbols
// Source: https://www.akashtrehan.com/printing-emojis-on-terminal/
#ifdef _WIN32 // Set Console Output to UTF8 (Only on Windows) for the bomb-emote
    // Source: https://stackoverflow.com/a/45622802/14379859
    SetConsoleOutputCP(CP_UTF8);
    setvbuf(stdout, nullptr, _IOFBF, 1000);
#endif
    srand(time(NULL)); // Set random seed
    initField(ms_field);
    insertBombs(ms_field);
    insertNumbers(ms_field);
    printField(ms_field);
}

void initField(char field[FIELD_SIZE_X][FIELD_SIZE_Y])
{
    for (int i = 0; i < FIELD_SIZE_X; i++)
    {
        for (int j = 0; j < FIELD_SIZE_Y; j++)
        {
            field[i][j] = '.'; // Init field with spaces (empty)
        }
    }
}
void insertBombs(char field[FIELD_SIZE_X][FIELD_SIZE_Y])
{
    int bombCounter = 0;
    while (bombCounter < BOMBS_COUNT)
    {
        // Get Random Coordinate for bomb
        int x = GetRandomNumberBetween(0, FIELD_SIZE_X - 1);
        int y = GetRandomNumberBetween(0, FIELD_SIZE_Y - 1);
        // It is not possible to place bomb on bomb
        if (field[x][y] != BOMBCHAR)
        {
            field[x][y] = BOMBCHAR;
            bombCounter++;
        }
        // Do this as long as bombCounter is not reached
    }
}

void insertNumbers(char field[FIELD_SIZE_X][FIELD_SIZE_Y])
{
    // Array of Directions (leftTop, left, leftBottom, top, bottom, rightTop, right, rightBottom)
    int dirs[8][2] = {{-1, -1}, {-1, 0}, {-1, 1}, {0, -1}, {0, 1}, {1, -1}, {1, 0}, {1, 1}};   
    for (int i = 0; i < FIELD_SIZE_X; i++)
    {
        for (int j = 0; j < FIELD_SIZE_Y; j++)
        {
            if (field[i][j] != BOMBCHAR) // If Field is not a bomb
            {
                int count = 0;
                for (int k = 0; k < 8; k++) // Search in every direction
                {
                    int x = i + dirs[k][0];
                    int y = j + dirs[k][1];
                    if (x >= 0 && x < FIELD_SIZE_X && y >= 0 && y < FIELD_SIZE_Y) // If search-position is not out of bounds
                    {
                        if (field[x][y] == BOMBCHAR)  // Count for every bomb
                        {
                            count++;
                        }
                    }
                }
                if (count > 0)
                {
                    field[i][j] = count + '0'; // Insert number in field
                }
            }
        }
    }
}

void printField(char field[FIELD_SIZE_X][FIELD_SIZE_Y])
{
    #ifdef WITHEMOTE
    std::string charSpace = " "; // Space between numbers and bombs to make it look better
    #else
    std::string charSpace = "";
    #endif
    for (int i = 0; i < FIELD_SIZE_X; i++)
    {
        for (int j = 0; j < FIELD_SIZE_Y; j++)
        {
            switch (field[i][j])
            {
            case BOMBCHAR:
                std::cout << _CHAR_BOMB
                 << COLOR_RESET;
                break;
            case '1':
                std::cout  << _CHAR_1  << charSpace << COLOR_RESET;
                break;
            case '2':
                std::cout  << _CHAR_2   << charSpace << COLOR_RESET;
                break;
            case '3':
                std::cout << _CHAR_3 << charSpace << COLOR_RESET;
                break;
            case '4':
                std::cout <<  _CHAR_4  << charSpace << COLOR_RESET;
                break;
            case '5':
                std::cout <<  _CHAR_5  << charSpace << COLOR_RESET;
                break;
            case '6':
                std::cout <<  _CHAR_6  << charSpace << COLOR_RESET;
                break;
            case '7':
                std::cout << _CHAR_7  << charSpace << COLOR_RESET;
                break;
            case '8':
                std::cout << _CHAR_8  << charSpace << COLOR_RESET;
                break;
            case '.':
                std::cout <<  _CHAR_REVEALED << COLOR_RESET;
                break;
            default:
                std::cout << _CHAR_HIDDEN << COLOR_RESET;
                break;
            }
        }
        std::cout << std::endl;
    }
}
